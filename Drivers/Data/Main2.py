import sys
import math
import qiskit as qk
import MatrixProcedures as mp
import QAlgs as qa
import QWOps as qw
import qiskit.circuit.library as clib
from qiskit import *

EPSILON=1e-10
shots=4096

IBMQ.enable_account('')
provider=IBMQ.get_provider(hub='ibm-q-research-2', group='uni-manitoba-1')

back1 = qk.BasicAer.get_backend('statevector_simulator')
back2 = provider.get_backend('ibmq_jakarta')
f = open('./op_data.dat', 'w')

# the choice of nq_phase affects the accuracy of QPE
nq_phase=2
N_phase=int(math.pow(2.0,nq_phase)+EPSILON)

# initialize the matrix equation, and prepare it for the quantum procedure
print("Building system... ",end='')
sys.stdout.flush()
msystem = mp.MatrixSystem(M=2,expand=False)
msystem.RandInit()
msystem.PrepSystem()
print("Done.")

# calculate C
C=0.9999999998

# construct the top-level operators
print("Building operators... ",end='')
sys.stdout.flush()
qw_ops=qw.Operators(msystem)
init = qk.extensions.Initialize(msystem.b).copy(name='Init')
#T=qw_ops.T().copy(name='T')
#W=qw_ops.W().copy(name='W')
#QPE=qa.QPE(W,nq_phase,2*msystem.n+2)
#Rc=qa.HHLRotation(nq_phase, msystem)
print("Done.")

# initialize the quantum system itself
reg_phase=qk.QuantumRegister(nq_phase)
reg_r1=qk.QuantumRegister(msystem.n)
reg_r1a=qk.QuantumRegister(1)
reg_r2=qk.QuantumRegister(msystem.n)
reg_r2a=qk.QuantumRegister(1)
reg_a_hhl=qk.QuantumRegister(1)
reg_class=qk.ClassicalRegister(nq_phase+2*msystem.n+3)

reg_all=reg_phase[:]+reg_r1[:]+reg_r1a[:]+reg_r2[:]+reg_r2a[:]+reg_a_hhl[:]

fread=open('./job_data.dat','r')
jobs=[]
for line in fread.readlines():
    jobs.append(line.split(',')[2].strip())
fread.close()

l=0
def run_op(circ_init, op, reg_work, reg_all, reg_class):
    global l, back1, back2
    
    if(l>=len(jobs)):
        sys.exit()
    
    print('Job ', l)
    
    circ = circ_init
    
    circ.append(op, reg_work)
    
    circ_transpiled=qk.transpile(circ,back1,optimization_level=2,basis_gates=['cx','id','rz','sx','x'])
    result1 = back1.run(circ_transpiled).result()
    statevector=result1.get_statevector()
    probs = [abs(x)*abs(x) for x in statevector]
    
    circ.measure(reg_all,reg_class)
    job=back2.retrieve_job(jobs[l])
    print(job.status())
    if(job.status() is qk.providers.JobStatus.ERROR):
        print(job.error_message())
    elif(job.status() is qk.providers.JobStatus.QUEUED):
        print(job.queue_info())
    elif(job.status() is qk.providers.JobStatus.DONE):
        result2=job.result()
        counts=result2.get_counts()
    
        format_str='{:0%db}'%(nq_phase+2*msystem.n+3)
        err=0.0
        for k in range(int(pow(2.0,nq_phase+2*msystem.n+3)+EPSILON)):
            bit_str=format_str.format(k)
            if((bit_str in counts) and (probs[k]>EPSILON)):
                err = err + abs((float(counts[bit_str])/float(shots)-probs[k])/probs[k])
        err=err/float(len(counts))
    
        #circ_temp=qk.QuantumCircuit(reg_work)
        #circ_temp.append(op,reg_work)
        #circ_transpiled=qk.transpile(circ_temp,back2,optimization_level=2,basis_gates=['cx','id','rz','sx','x'])
        n_ops=circ_transpiled.size()
    
        f.write('%d,%d,%s\n'%(l,n_ops,100.0*err))
        print('%d,%d,%s'%(l,n_ops,100.0*err))
    print()
    l=l+1
    
    return qk.extensions.Initialize(statevector)

# initial T
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_r1)
init=run_op(circ_init, clib.HGate(), reg_r2, reg_all,reg_class)

# QPE
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.HGate(),[reg_phase[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.HGate(),[reg_phase[1]], reg_all,reg_class)

circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.HGate().control(2,None,'01'),[reg_phase[0]]+[reg_r1a[0]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'11'),[reg_phase[0]]+[reg_r1a[0]]+[reg_r2a[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.ZGate().control(1,None,'1'),[reg_phase[0]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[0]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.ZGate().control(1,None,'1'),[reg_phase[0]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[0]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'01'),[reg_phase[0]]+reg_r2[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.ZGate().control(2,None,'01'),[reg_phase[0]]+reg_r2[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'01'),[reg_phase[0]]+reg_r2[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.HGate().control(2,None,'01'),[reg_phase[0]]+[reg_r1a[0]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'11'),[reg_phase[0]]+[reg_r1a[0]]+[reg_r2a[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SwapGate().control(1,None,'1'), [reg_phase[0]]+reg_r1[:]+reg_r2[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SwapGate().control(1,None,'1'), [reg_phase[0]]+reg_r1a[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SGate().control(1,None,'1'),[reg_phase[0]]+[reg_r1[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[0]]+[reg_r1[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SGate().control(1,None,'1'),[reg_phase[0]]+[reg_r1[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[0]]+[reg_r1[0]], reg_all,reg_class)

circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.HGate().control(2,None,'01'),[reg_phase[1]]+[reg_r1a[0]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'11'),[reg_phase[1]]+[reg_r1a[0]]+[reg_r2a[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.ZGate().control(1,None,'1'),[reg_phase[1]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[1]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.ZGate().control(1,None,'1'),[reg_phase[1]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[1]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'01'),[reg_phase[1]]+reg_r2[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.ZGate().control(2,None,'01'),[reg_phase[1]]+reg_r2[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'01'),[reg_phase[1]]+reg_r2[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.HGate().control(2,None,'01'),[reg_phase[1]]+[reg_r1a[0]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'11'),[reg_phase[1]]+[reg_r1a[0]]+[reg_r2a[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SwapGate().control(1,None,'1'), [reg_phase[1]]+reg_r1[:]+reg_r2[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SwapGate().control(1,None,'1'), [reg_phase[1]]+reg_r1a[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SGate().control(1,None,'1'),[reg_phase[1]]+[reg_r1[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[1]]+[reg_r1[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SGate().control(1,None,'1'),[reg_phase[1]]+[reg_r1[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[1]]+[reg_r1[0]], reg_all,reg_class)

circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.HGate().control(2,None,'01'),[reg_phase[1]]+[reg_r1a[0]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'11'),[reg_phase[1]]+[reg_r1a[0]]+[reg_r2a[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.ZGate().control(1,None,'1'),[reg_phase[1]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[1]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.ZGate().control(1,None,'1'),[reg_phase[1]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[1]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'01'),[reg_phase[1]]+reg_r2[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.ZGate().control(2,None,'01'),[reg_phase[1]]+reg_r2[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'01'),[reg_phase[1]]+reg_r2[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.HGate().control(2,None,'01'),[reg_phase[1]]+[reg_r1a[0]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'11'),[reg_phase[1]]+[reg_r1a[0]]+[reg_r2a[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SwapGate().control(1,None,'1'), [reg_phase[1]]+reg_r1[:]+reg_r2[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SwapGate().control(1,None,'1'), [reg_phase[1]]+reg_r1a[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SGate().control(1,None,'1'),[reg_phase[1]]+[reg_r1[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[1]]+[reg_r1[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SGate().control(1,None,'1'),[reg_phase[1]]+[reg_r1[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[1]]+[reg_r1[0]], reg_all,reg_class)

circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SwapGate(),reg_phase, reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.HGate(),[reg_phase[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.CZGate().power(0.5).inverse(),reg_phase, reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.HGate(),[reg_phase[1]], reg_all,reg_class)

# HHL ancilla rotation
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
lam=-msystem.d
init=run_op(circ_init, clib.RYGate(2.0*math.acos(C/lam)).control(nq_phase,None,'00'), reg_phase[:]+reg_a_hhl[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
lam=msystem.X-msystem.d
init=run_op(circ_init, clib.RYGate(2.0*math.acos(C/lam)).control(nq_phase,None,'01'), reg_phase[:]+reg_a_hhl[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
lam=-msystem.d
init=run_op(circ_init, clib.RYGate(2.0*math.acos(C/lam)).control(nq_phase,None,'10'), reg_phase[:]+reg_a_hhl[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
lam=-msystem.X-msystem.d
init=run_op(circ_init, clib.RYGate(2.0*math.acos(C/lam)).control(nq_phase,None,'11'), reg_phase[:]+reg_a_hhl[:], reg_all,reg_class)

# inverse QPE
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.HGate(),[reg_phase[1]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.CZGate().power(0.5),reg_phase, reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.HGate(),[reg_phase[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SwapGate(),reg_phase, reg_all,reg_class)

circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[1]]+[reg_r1[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SGate().inverse().control(1,None,'1'),[reg_phase[1]]+[reg_r1[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[1]]+[reg_r1[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SGate().inverse().control(1,None,'1'),[reg_phase[1]]+[reg_r1[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SwapGate().control(1,None,'1'), [reg_phase[1]]+reg_r1a[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SwapGate().control(1,None,'1'), [reg_phase[1]]+reg_r1[:]+reg_r2[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'11'),[reg_phase[1]]+[reg_r1a[0]]+[reg_r2a[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.HGate().control(2,None,'01'),[reg_phase[1]]+[reg_r1a[0]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'01'),[reg_phase[1]]+reg_r2[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.ZGate().control(2,None,'01'),[reg_phase[1]]+reg_r2[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'01'),[reg_phase[1]]+reg_r2[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[1]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.ZGate().control(1,None,'1'),[reg_phase[1]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[1]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.ZGate().control(1,None,'1'),[reg_phase[1]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'11'),[reg_phase[1]]+[reg_r1a[0]]+[reg_r2a[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.HGate().control(2,None,'01'),[reg_phase[1]]+[reg_r1a[0]]+[reg_r2[0]], reg_all,reg_class)


circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[1]]+[reg_r1[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SGate().inverse().control(1,None,'1'),[reg_phase[1]]+[reg_r1[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[1]]+[reg_r1[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SGate().inverse().control(1,None,'1'),[reg_phase[1]]+[reg_r1[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SwapGate().control(1,None,'1'), [reg_phase[1]]+reg_r1a[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SwapGate().control(1,None,'1'), [reg_phase[1]]+reg_r1[:]+reg_r2[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'11'),[reg_phase[1]]+[reg_r1a[0]]+[reg_r2a[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.HGate().control(2,None,'01'),[reg_phase[1]]+[reg_r1a[0]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'01'),[reg_phase[1]]+reg_r2[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.ZGate().control(2,None,'01'),[reg_phase[1]]+reg_r2[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'01'),[reg_phase[1]]+reg_r2[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[1]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.ZGate().control(1,None,'1'),[reg_phase[1]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[1]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.ZGate().control(1,None,'1'),[reg_phase[1]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'11'),[reg_phase[1]]+[reg_r1a[0]]+[reg_r2a[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.HGate().control(2,None,'01'),[reg_phase[1]]+[reg_r1a[0]]+[reg_r2[0]], reg_all,reg_class)

circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[0]]+[reg_r1[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SGate().inverse().control(1,None,'1'),[reg_phase[0]]+[reg_r1[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[0]]+[reg_r1[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SGate().inverse().control(1,None,'1'),[reg_phase[0]]+[reg_r1[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SwapGate().control(1,None,'1'), [reg_phase[0]]+reg_r1a[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.SwapGate().control(1,None,'1'), [reg_phase[0]]+reg_r1[:]+reg_r2[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'11'),[reg_phase[0]]+[reg_r1a[0]]+[reg_r2a[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.HGate().control(2,None,'01'),[reg_phase[0]]+[reg_r1a[0]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'01'),[reg_phase[0]]+reg_r2[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.ZGate().control(2,None,'01'),[reg_phase[0]]+reg_r2[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'01'),[reg_phase[0]]+reg_r2[:]+reg_r2a[:], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[0]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.ZGate().control(1,None,'1'),[reg_phase[0]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(1,None,'1'),[reg_phase[0]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.ZGate().control(1,None,'1'),[reg_phase[0]]+[reg_r2[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.XGate().control(2,None,'11'),[reg_phase[0]]+[reg_r1a[0]]+[reg_r2a[0]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.HGate().control(2,None,'01'),[reg_phase[0]]+[reg_r1a[0]]+[reg_r2[0]], reg_all,reg_class)

circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.HGate(),[reg_phase[1]], reg_all,reg_class)
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.HGate(),[reg_phase[0]], reg_all,reg_class)

# inverse T
circ_init=qk.QuantumCircuit(reg_a_hhl,reg_r2a,reg_r2,reg_r1a,reg_r1,reg_phase,reg_class)
circ_init.append(init,reg_all)
init=run_op(circ_init, clib.HGate(),reg_r2, reg_all,reg_class)

f.close()

